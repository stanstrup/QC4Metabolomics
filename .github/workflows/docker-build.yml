name: Build and Release

on:
  push:
    branches: [main, master]

env:
  REGISTRY: ghcr.io
  IMAGE_BASE: ghcr.io/${{ github.repository_owner }}/qc4metabolomics

jobs:
  check-base-changes:
    name: Check if base image needs rebuild
    runs-on: ubuntu-latest
    outputs:
      base_changed: ${{ steps.check.outputs.base_changed }}
    steps:
      - uses: actions/checkout@v4

      - name: Check if base dependencies changed
        id: check
        run: |
          git fetch origin ${{ github.event.before }} --depth=1 || true
          CHANGED=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} || true)
          echo "$CHANGED"

          if echo "$CHANGED" | grep -E '^(setup/Dockerfile_base|\.Rprofile|renv\.lock|\.env.*|renv/)' > /dev/null; then
            echo "base_changed=true" >> "$GITHUB_OUTPUT"
          else
            echo "base_changed=false" >> "$GITHUB_OUTPUT"
          fi

  build-base:
    name: Build and Push qc_base
    runs-on: ubuntu-latest
    needs: check-base-changes
    if: needs.check-base-changes.outputs.base_changed == 'true'
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push qc_base
        run: |
          docker build -f setup/Dockerfile_base -t qc_base:local -t $IMAGE_BASE/qc_base:latest .
          docker push $IMAGE_BASE/qc_base:latest

  build-process:
    name: Build and Push qc_process
    runs-on: ubuntu-latest
    needs: [check-base-changes, build-base]
    if: always()
    outputs:
      image_tag: ${{ steps.tag.outputs.image_tag }}
    steps:
      - uses: actions/checkout@v4
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - run: docker pull $IMAGE_BASE/qc_base:latest

      - name: Build qc_process
        run: docker build -f setup/Dockerfile --target process -t qc_process:latest .

      - id: tag
        run: echo "image_tag=qc_process" >> "$GITHUB_OUTPUT"

      - run: |
          docker tag qc_process:latest $IMAGE_BASE/qc_process:latest
          docker push $IMAGE_BASE/qc_process:latest

  build-shiny:
    name: Build and Push qc_shiny
    runs-on: ubuntu-latest
    needs: [check-base-changes, build-base]
    if: always()
    outputs:
      image_tag: ${{ steps.tag.outputs.image_tag }}
    steps:
      - uses: actions/checkout@v4
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - run: docker pull $IMAGE_BASE/qc_base:latest

      - name: Build qc_shiny
        run: docker build -f setup/Dockerfile --target shiny -t qc_shiny:latest .

      - id: tag
        run: echo "image_tag=qc_shiny" >> "$GITHUB_OUTPUT"

      - run: |
          docker tag qc_shiny:latest $IMAGE_BASE/qc_shiny:latest
          docker push $IMAGE_BASE/qc_shiny:latest

  build-converter:
    name: Build and Push qc_converter
    runs-on: ubuntu-latest
    needs: [check-base-changes, build-base]
    if: always()
    outputs:
      image_tag: ${{ steps.tag.outputs.image_tag }}
    steps:
      - uses: actions/checkout@v4
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build qc_converter
        run: docker build -f setup/Dockerfile_converter --target converter -t qc_converter:latest .

      - id: tag
        run: echo "image_tag=qc_converter" >> "$GITHUB_OUTPUT"

      - run: |
          docker tag qc_converter:latest $IMAGE_BASE/qc_converter:latest
          docker push $IMAGE_BASE/qc_converter:latest

  wait-for-builds:
    name: Wait for all image builds
    runs-on: ubuntu-latest
    needs: [build-process, build-shiny, build-converter]
    if: always()
    steps:
      - name: Dummy step
        run: echo "Waiting for all builds to complete"

  release:
    name: Semantic Release
    runs-on: ubuntu-latest
    needs: wait-for-builds
    if: always()
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Semantic Release CLI and plugins
        run: |
          npm install --global semantic-release \
            @semantic-release/changelog \
            @semantic-release/git \
            @semantic-release/github \
            @semantic-release/exec

      - name: Prepare release assets
        run: |
          mkdir -p release-dist/demo/db
          mkdir -p release-dist/demo/data
          mkdir -p release-dist/backups
          cp docker-compose_demo.yml release-dist/
          cp settings_demo.env release-dist/
          cp -r demo/data release-dist/demo

      - name: Run Semantic Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: semantic-release

